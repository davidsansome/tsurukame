// Copyright 2018 David Sansome
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "github.com/davidsansome/tsurukame;proto";
option objc_class_prefix = "TKM";
option swift_prefix = "TKM";

package proto;

message Meaning {
  enum Type {
    UNKNOWN = 0;
    PRIMARY = 1;
    SECONDARY = 2;

    // Old meaning for a radical that was changed.
    AUXILIARY_WHITELIST = 3;

    // Similar (within edit distance) to an accepted reading but incorrect.
    BLACKLIST = 4;
  }
  optional string meaning = 1;
  optional Type type = 3;

  reserved 2;  // Don't re-use fields.
}

message Reading {
  optional string reading = 1;

  // Non-primary readings are not accepted for Kanji.
  // TODO: use the accepted_answer field instead.
  optional bool is_primary = 2;

  // Type is only set for Kanji readings - not for Vocabulary.
  enum Type {
    UNKNOWN = 0;
    ONYOMI = 1;
    KUNYOMI = 2;
    NANORI = 3;
  }
  optional Type type = 3;
}

message Radical {
  optional string character_image = 1;  // Not present in final data.
  optional string mnemonic = 2;
  optional string deprecated_mnemonic = 5;
  optional bool has_character_image_file = 3;

  reserved 4, 6;
}

message Kanji {
  optional string meaning_mnemonic = 1;
  optional string meaning_hint = 2;
  optional string reading_mnemonic = 3;
  optional string reading_hint = 4;

  reserved 5, 6, 7, 8, 9;

  optional string visually_similar_kanji = 10;
}

message Vocabulary {
  optional string meaning_explanation = 1;
  optional string reading_explanation = 2;

  reserved 5, 6, 7;

  message Sentence {
    optional string japanese = 1;
    optional string english = 2;
  }
  repeated Sentence sentences = 3;

  enum PartOfSpeech {
    UNKNOWN = 0;
    NOUN = 1;
    NUMERAL = 2;
    INTRANSITIVE_VERB = 3;
    ICHIDAN_VERB = 4;
    TRANSITIVE_VERB = 5;
    NO_ADJECTIVE = 6;
    GODAN_VERB = 7;
    NA_ADJECTIVE = 8;
    I_ADJECTIVE = 9;
    SUFFIX = 10;
    ADVERB = 11;
    SURU_VERB = 12;
    PREFIX = 13;
    PROPER_NOUN = 14;
    EXPRESSION = 15;
    ADJECTIVE = 16;
    INTERJECTION = 17;
    COUNTER = 18;
    PRONOUN = 19;
    CONJUNCTION = 20;
  }
  repeated PartOfSpeech parts_of_speech = 4;

  message PronunciationAudio {
    optional string url = 1;
    optional int64 voice_actor_id = 2;
  }

  repeated PronunciationAudio audio = 8;
}

message Subject {
  optional int64 id = 1;
  optional int32 level = 2;
  optional string slug = 3;
  optional string document_url = 4;

  optional string japanese = 5;
  repeated Reading readings = 6;  // Does not apply to radicals or kana vocabulary.
  repeated Meaning meanings = 7;
  repeated int64 component_subject_ids = 8;  // Does not apply to radicals.
  repeated int64 amalgamation_subject_ids = 12;  // Does not apply to vocabulary or kana vocabulary.

  optional Radical radical = 9;
  optional Kanji kanji = 10;
  optional Vocabulary vocabulary = 11;

  enum Type {
    UNKNOWN = 0;
    RADICAL = 1;
    KANJI = 2;
    VOCABULARY = 3;
  }
}

message Assignment {
  optional int64 id = 1;
  optional int32 level = 2;

  optional int64 subject_id = 3;
  optional Subject.Type subject_type = 4;
  optional int32 available_at = 5;
  optional int32 started_at = 6;
  optional int32 srs_stage_number = 7;
  optional int32 passed_at = 8;
  optional int32 burned_at = 9;

  // Kana-only vocab shares the VOCABULARY subject_type, but we still want to be
  // able to filter them out if the user wants to.
  optional bool is_kana_only_vocab = 10;
}

message Progress {
  reserved 1, 2;
  optional bool meaning_wrong = 3;
  optional bool reading_wrong = 4;
  optional bool is_lesson = 5;
  optional Assignment assignment = 6;
  optional int32 created_at = 7;
  optional int32 meaning_wrong_count = 8;
  optional int32 reading_wrong_count = 9;
}

message StudyMaterials {
  optional int64 id = 1;
  optional int64 subject_id = 2;
  reserved 6;
  optional string meaning_note = 3;
  optional string reading_note = 4;
  repeated string meaning_synonyms = 5;
}

message User {
  optional string username = 1;
  optional int32 level = 2;
  optional int32 max_level_granted_by_subscription = 3;
  optional string profile_url = 4;
  optional int32 started_at = 5;
  optional bool subscribed = 6;
  optional int32 subscription_ends_at = 7;
  optional int32 vacation_started_at = 8;
}

message FormattedText {
  enum Format {
    UNKNOWN = 0;
    RADICAL = 1;
    KANJI = 2;
    JAPANESE = 3;
    READING = 4;
    VOCABULARY = 5;
    ITALIC = 6;
    BOLD = 7;
    LINK = 8;

    // Used internally by Tsurukame.
    APPRENTICE = 9;
    GURU = 10;
    MASTER = 11;
    ENLIGHTENED = 12;
  }
  repeated Format format = 1;
  optional string text = 2;
  optional string link_url = 3;
}

message DataFileHeader {
  repeated SubjectsByLevel subjects_by_level = 1;

  // The level of each subject.
  repeated int32 level_by_subject = 4;

  // Subject IDs that no longer have any data.  The client should ignore any
  // assignments with these subjects.
  repeated int32 deleted_subject_ids = 3;

  // Offset of each encoded Subject message, starting from the end of this
  // header in the file.
  repeated uint32 subject_byte_offset = 2;
}

message SubjectsByLevel {
  repeated int64 radicals = 1;
  repeated int64 kanji = 2;
  repeated int64 vocabulary = 3;
}

message Level {
  optional int64 id = 1;
  optional int32 level = 2;
  optional int32 abandoned_at = 3;
  optional int32 completed_at = 4;
  optional int32 created_at = 5;
  optional int32 passed_at = 6;
  optional int32 started_at = 7;
  optional int32 unlocked_at = 8;
}

message DeprecatedMnemonicFile {
  message Subject {
    optional int32 id = 1;
    repeated FormattedText formatted_deprecated_mnemonic = 2;
  }
  repeated Subject subjects = 1;
}

message VoiceActor {
  enum Gender {
    UNKNOWN = 0;
    MALE = 1;
    FEMALE = 2;
  }

  optional int64 id = 1;
  optional Gender gender = 2;
  optional string name = 3;
  optional string description = 4;
}
