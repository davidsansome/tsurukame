// Copyright 2018 David Sansome
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: wanikani_api.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Meaning_Type int32

const (
	Meaning_UNKNOWN   Meaning_Type = 0
	Meaning_PRIMARY   Meaning_Type = 1
	Meaning_SECONDARY Meaning_Type = 2
	// Old meaning for a radical that was changed.
	Meaning_AUXILIARY_WHITELIST Meaning_Type = 3
	// Similar (within edit distance) to an accepted reading but incorrect.
	Meaning_BLACKLIST Meaning_Type = 4
)

// Enum value maps for Meaning_Type.
var (
	Meaning_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "PRIMARY",
		2: "SECONDARY",
		3: "AUXILIARY_WHITELIST",
		4: "BLACKLIST",
	}
	Meaning_Type_value = map[string]int32{
		"UNKNOWN":             0,
		"PRIMARY":             1,
		"SECONDARY":           2,
		"AUXILIARY_WHITELIST": 3,
		"BLACKLIST":           4,
	}
)

func (x Meaning_Type) Enum() *Meaning_Type {
	p := new(Meaning_Type)
	*p = x
	return p
}

func (x Meaning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Meaning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_wanikani_api_proto_enumTypes[0].Descriptor()
}

func (Meaning_Type) Type() protoreflect.EnumType {
	return &file_wanikani_api_proto_enumTypes[0]
}

func (x Meaning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Meaning_Type.Descriptor instead.
func (Meaning_Type) EnumDescriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{0, 0}
}

// Type is only set for Kanji readings - not for Vocabulary.
type Reading_Type int32

const (
	Reading_UNKNOWN Reading_Type = 0
	Reading_ONYOMI  Reading_Type = 1
	Reading_KUNYOMI Reading_Type = 2
	Reading_NANORI  Reading_Type = 3
)

// Enum value maps for Reading_Type.
var (
	Reading_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONYOMI",
		2: "KUNYOMI",
		3: "NANORI",
	}
	Reading_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"ONYOMI":  1,
		"KUNYOMI": 2,
		"NANORI":  3,
	}
)

func (x Reading_Type) Enum() *Reading_Type {
	p := new(Reading_Type)
	*p = x
	return p
}

func (x Reading_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reading_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_wanikani_api_proto_enumTypes[1].Descriptor()
}

func (Reading_Type) Type() protoreflect.EnumType {
	return &file_wanikani_api_proto_enumTypes[1]
}

func (x Reading_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reading_Type.Descriptor instead.
func (Reading_Type) EnumDescriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{1, 0}
}

type Vocabulary_PartOfSpeech int32

const (
	Vocabulary_UNKNOWN           Vocabulary_PartOfSpeech = 0
	Vocabulary_NOUN              Vocabulary_PartOfSpeech = 1
	Vocabulary_NUMERAL           Vocabulary_PartOfSpeech = 2
	Vocabulary_INTRANSITIVE_VERB Vocabulary_PartOfSpeech = 3
	Vocabulary_ICHIDAN_VERB      Vocabulary_PartOfSpeech = 4
	Vocabulary_TRANSITIVE_VERB   Vocabulary_PartOfSpeech = 5
	Vocabulary_NO_ADJECTIVE      Vocabulary_PartOfSpeech = 6
	Vocabulary_GODAN_VERB        Vocabulary_PartOfSpeech = 7
	Vocabulary_NA_ADJECTIVE      Vocabulary_PartOfSpeech = 8
	Vocabulary_I_ADJECTIVE       Vocabulary_PartOfSpeech = 9
	Vocabulary_SUFFIX            Vocabulary_PartOfSpeech = 10
	Vocabulary_ADVERB            Vocabulary_PartOfSpeech = 11
	Vocabulary_SURU_VERB         Vocabulary_PartOfSpeech = 12
	Vocabulary_PREFIX            Vocabulary_PartOfSpeech = 13
	Vocabulary_PROPER_NOUN       Vocabulary_PartOfSpeech = 14
	Vocabulary_EXPRESSION        Vocabulary_PartOfSpeech = 15
	Vocabulary_ADJECTIVE         Vocabulary_PartOfSpeech = 16
	Vocabulary_INTERJECTION      Vocabulary_PartOfSpeech = 17
	Vocabulary_COUNTER           Vocabulary_PartOfSpeech = 18
	Vocabulary_PRONOUN           Vocabulary_PartOfSpeech = 19
	Vocabulary_CONJUNCTION       Vocabulary_PartOfSpeech = 20
)

// Enum value maps for Vocabulary_PartOfSpeech.
var (
	Vocabulary_PartOfSpeech_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NOUN",
		2:  "NUMERAL",
		3:  "INTRANSITIVE_VERB",
		4:  "ICHIDAN_VERB",
		5:  "TRANSITIVE_VERB",
		6:  "NO_ADJECTIVE",
		7:  "GODAN_VERB",
		8:  "NA_ADJECTIVE",
		9:  "I_ADJECTIVE",
		10: "SUFFIX",
		11: "ADVERB",
		12: "SURU_VERB",
		13: "PREFIX",
		14: "PROPER_NOUN",
		15: "EXPRESSION",
		16: "ADJECTIVE",
		17: "INTERJECTION",
		18: "COUNTER",
		19: "PRONOUN",
		20: "CONJUNCTION",
	}
	Vocabulary_PartOfSpeech_value = map[string]int32{
		"UNKNOWN":           0,
		"NOUN":              1,
		"NUMERAL":           2,
		"INTRANSITIVE_VERB": 3,
		"ICHIDAN_VERB":      4,
		"TRANSITIVE_VERB":   5,
		"NO_ADJECTIVE":      6,
		"GODAN_VERB":        7,
		"NA_ADJECTIVE":      8,
		"I_ADJECTIVE":       9,
		"SUFFIX":            10,
		"ADVERB":            11,
		"SURU_VERB":         12,
		"PREFIX":            13,
		"PROPER_NOUN":       14,
		"EXPRESSION":        15,
		"ADJECTIVE":         16,
		"INTERJECTION":      17,
		"COUNTER":           18,
		"PRONOUN":           19,
		"CONJUNCTION":       20,
	}
)

func (x Vocabulary_PartOfSpeech) Enum() *Vocabulary_PartOfSpeech {
	p := new(Vocabulary_PartOfSpeech)
	*p = x
	return p
}

func (x Vocabulary_PartOfSpeech) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vocabulary_PartOfSpeech) Descriptor() protoreflect.EnumDescriptor {
	return file_wanikani_api_proto_enumTypes[2].Descriptor()
}

func (Vocabulary_PartOfSpeech) Type() protoreflect.EnumType {
	return &file_wanikani_api_proto_enumTypes[2]
}

func (x Vocabulary_PartOfSpeech) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vocabulary_PartOfSpeech.Descriptor instead.
func (Vocabulary_PartOfSpeech) EnumDescriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{4, 0}
}

type Subject_Type int32

const (
	Subject_UNKNOWN    Subject_Type = 0
	Subject_RADICAL    Subject_Type = 1
	Subject_KANJI      Subject_Type = 2
	Subject_VOCABULARY Subject_Type = 3
)

// Enum value maps for Subject_Type.
var (
	Subject_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "RADICAL",
		2: "KANJI",
		3: "VOCABULARY",
	}
	Subject_Type_value = map[string]int32{
		"UNKNOWN":    0,
		"RADICAL":    1,
		"KANJI":      2,
		"VOCABULARY": 3,
	}
)

func (x Subject_Type) Enum() *Subject_Type {
	p := new(Subject_Type)
	*p = x
	return p
}

func (x Subject_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subject_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_wanikani_api_proto_enumTypes[3].Descriptor()
}

func (Subject_Type) Type() protoreflect.EnumType {
	return &file_wanikani_api_proto_enumTypes[3]
}

func (x Subject_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subject_Type.Descriptor instead.
func (Subject_Type) EnumDescriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{5, 0}
}

type FormattedText_Format int32

const (
	FormattedText_UNKNOWN    FormattedText_Format = 0
	FormattedText_RADICAL    FormattedText_Format = 1
	FormattedText_KANJI      FormattedText_Format = 2
	FormattedText_JAPANESE   FormattedText_Format = 3
	FormattedText_READING    FormattedText_Format = 4
	FormattedText_VOCABULARY FormattedText_Format = 5
	FormattedText_ITALIC     FormattedText_Format = 6
	FormattedText_BOLD       FormattedText_Format = 7
	FormattedText_LINK       FormattedText_Format = 8
	// Used internally by Tsurukame.
	FormattedText_APPRENTICE  FormattedText_Format = 9
	FormattedText_GURU        FormattedText_Format = 10
	FormattedText_MASTER      FormattedText_Format = 11
	FormattedText_ENLIGHTENED FormattedText_Format = 12
)

// Enum value maps for FormattedText_Format.
var (
	FormattedText_Format_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "RADICAL",
		2:  "KANJI",
		3:  "JAPANESE",
		4:  "READING",
		5:  "VOCABULARY",
		6:  "ITALIC",
		7:  "BOLD",
		8:  "LINK",
		9:  "APPRENTICE",
		10: "GURU",
		11: "MASTER",
		12: "ENLIGHTENED",
	}
	FormattedText_Format_value = map[string]int32{
		"UNKNOWN":     0,
		"RADICAL":     1,
		"KANJI":       2,
		"JAPANESE":    3,
		"READING":     4,
		"VOCABULARY":  5,
		"ITALIC":      6,
		"BOLD":        7,
		"LINK":        8,
		"APPRENTICE":  9,
		"GURU":        10,
		"MASTER":      11,
		"ENLIGHTENED": 12,
	}
)

func (x FormattedText_Format) Enum() *FormattedText_Format {
	p := new(FormattedText_Format)
	*p = x
	return p
}

func (x FormattedText_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FormattedText_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_wanikani_api_proto_enumTypes[4].Descriptor()
}

func (FormattedText_Format) Type() protoreflect.EnumType {
	return &file_wanikani_api_proto_enumTypes[4]
}

func (x FormattedText_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FormattedText_Format.Descriptor instead.
func (FormattedText_Format) EnumDescriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{10, 0}
}

type VoiceActor_Gender int32

const (
	VoiceActor_UNKNOWN VoiceActor_Gender = 0
	VoiceActor_MALE    VoiceActor_Gender = 1
	VoiceActor_FEMALE  VoiceActor_Gender = 2
)

// Enum value maps for VoiceActor_Gender.
var (
	VoiceActor_Gender_name = map[int32]string{
		0: "UNKNOWN",
		1: "MALE",
		2: "FEMALE",
	}
	VoiceActor_Gender_value = map[string]int32{
		"UNKNOWN": 0,
		"MALE":    1,
		"FEMALE":  2,
	}
)

func (x VoiceActor_Gender) Enum() *VoiceActor_Gender {
	p := new(VoiceActor_Gender)
	*p = x
	return p
}

func (x VoiceActor_Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceActor_Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_wanikani_api_proto_enumTypes[5].Descriptor()
}

func (VoiceActor_Gender) Type() protoreflect.EnumType {
	return &file_wanikani_api_proto_enumTypes[5]
}

func (x VoiceActor_Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceActor_Gender.Descriptor instead.
func (VoiceActor_Gender) EnumDescriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{15, 0}
}

type Meaning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meaning *string       `protobuf:"bytes,1,opt,name=meaning,proto3,oneof" json:"meaning,omitempty"`
	Type    *Meaning_Type `protobuf:"varint,3,opt,name=type,proto3,enum=proto.Meaning_Type,oneof" json:"type,omitempty"`
}

func (x *Meaning) Reset() {
	*x = Meaning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meaning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meaning) ProtoMessage() {}

func (x *Meaning) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meaning.ProtoReflect.Descriptor instead.
func (*Meaning) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{0}
}

func (x *Meaning) GetMeaning() string {
	if x != nil && x.Meaning != nil {
		return *x.Meaning
	}
	return ""
}

func (x *Meaning) GetType() Meaning_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Meaning_UNKNOWN
}

type Reading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reading *string `protobuf:"bytes,1,opt,name=reading,proto3,oneof" json:"reading,omitempty"`
	// Non-primary readings are not accepted for Kanji.
	// TODO: use the accepted_answer field instead.
	IsPrimary *bool         `protobuf:"varint,2,opt,name=is_primary,json=isPrimary,proto3,oneof" json:"is_primary,omitempty"`
	Type      *Reading_Type `protobuf:"varint,3,opt,name=type,proto3,enum=proto.Reading_Type,oneof" json:"type,omitempty"`
}

func (x *Reading) Reset() {
	*x = Reading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reading) ProtoMessage() {}

func (x *Reading) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reading.ProtoReflect.Descriptor instead.
func (*Reading) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{1}
}

func (x *Reading) GetReading() string {
	if x != nil && x.Reading != nil {
		return *x.Reading
	}
	return ""
}

func (x *Reading) GetIsPrimary() bool {
	if x != nil && x.IsPrimary != nil {
		return *x.IsPrimary
	}
	return false
}

func (x *Reading) GetType() Reading_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Reading_UNKNOWN
}

type Radical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterImage        *string `protobuf:"bytes,1,opt,name=character_image,json=characterImage,proto3,oneof" json:"character_image,omitempty"` // Not present in final data.
	Mnemonic              *string `protobuf:"bytes,2,opt,name=mnemonic,proto3,oneof" json:"mnemonic,omitempty"`
	DeprecatedMnemonic    *string `protobuf:"bytes,5,opt,name=deprecated_mnemonic,json=deprecatedMnemonic,proto3,oneof" json:"deprecated_mnemonic,omitempty"`
	HasCharacterImageFile *bool   `protobuf:"varint,3,opt,name=has_character_image_file,json=hasCharacterImageFile,proto3,oneof" json:"has_character_image_file,omitempty"`
}

func (x *Radical) Reset() {
	*x = Radical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Radical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Radical) ProtoMessage() {}

func (x *Radical) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Radical.ProtoReflect.Descriptor instead.
func (*Radical) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{2}
}

func (x *Radical) GetCharacterImage() string {
	if x != nil && x.CharacterImage != nil {
		return *x.CharacterImage
	}
	return ""
}

func (x *Radical) GetMnemonic() string {
	if x != nil && x.Mnemonic != nil {
		return *x.Mnemonic
	}
	return ""
}

func (x *Radical) GetDeprecatedMnemonic() string {
	if x != nil && x.DeprecatedMnemonic != nil {
		return *x.DeprecatedMnemonic
	}
	return ""
}

func (x *Radical) GetHasCharacterImageFile() bool {
	if x != nil && x.HasCharacterImageFile != nil {
		return *x.HasCharacterImageFile
	}
	return false
}

type Kanji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeaningMnemonic      *string `protobuf:"bytes,1,opt,name=meaning_mnemonic,json=meaningMnemonic,proto3,oneof" json:"meaning_mnemonic,omitempty"`
	MeaningHint          *string `protobuf:"bytes,2,opt,name=meaning_hint,json=meaningHint,proto3,oneof" json:"meaning_hint,omitempty"`
	ReadingMnemonic      *string `protobuf:"bytes,3,opt,name=reading_mnemonic,json=readingMnemonic,proto3,oneof" json:"reading_mnemonic,omitempty"`
	ReadingHint          *string `protobuf:"bytes,4,opt,name=reading_hint,json=readingHint,proto3,oneof" json:"reading_hint,omitempty"`
	VisuallySimilarKanji *string `protobuf:"bytes,10,opt,name=visually_similar_kanji,json=visuallySimilarKanji,proto3,oneof" json:"visually_similar_kanji,omitempty"`
}

func (x *Kanji) Reset() {
	*x = Kanji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kanji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kanji) ProtoMessage() {}

func (x *Kanji) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kanji.ProtoReflect.Descriptor instead.
func (*Kanji) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{3}
}

func (x *Kanji) GetMeaningMnemonic() string {
	if x != nil && x.MeaningMnemonic != nil {
		return *x.MeaningMnemonic
	}
	return ""
}

func (x *Kanji) GetMeaningHint() string {
	if x != nil && x.MeaningHint != nil {
		return *x.MeaningHint
	}
	return ""
}

func (x *Kanji) GetReadingMnemonic() string {
	if x != nil && x.ReadingMnemonic != nil {
		return *x.ReadingMnemonic
	}
	return ""
}

func (x *Kanji) GetReadingHint() string {
	if x != nil && x.ReadingHint != nil {
		return *x.ReadingHint
	}
	return ""
}

func (x *Kanji) GetVisuallySimilarKanji() string {
	if x != nil && x.VisuallySimilarKanji != nil {
		return *x.VisuallySimilarKanji
	}
	return ""
}

type Vocabulary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeaningExplanation *string                          `protobuf:"bytes,1,opt,name=meaning_explanation,json=meaningExplanation,proto3,oneof" json:"meaning_explanation,omitempty"`
	ReadingExplanation *string                          `protobuf:"bytes,2,opt,name=reading_explanation,json=readingExplanation,proto3,oneof" json:"reading_explanation,omitempty"`
	Sentences          []*Vocabulary_Sentence           `protobuf:"bytes,3,rep,name=sentences,proto3" json:"sentences,omitempty"`
	PartsOfSpeech      []Vocabulary_PartOfSpeech        `protobuf:"varint,4,rep,packed,name=parts_of_speech,json=partsOfSpeech,proto3,enum=proto.Vocabulary_PartOfSpeech" json:"parts_of_speech,omitempty"`
	Audio              []*Vocabulary_PronunciationAudio `protobuf:"bytes,8,rep,name=audio,proto3" json:"audio,omitempty"`
}

func (x *Vocabulary) Reset() {
	*x = Vocabulary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vocabulary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vocabulary) ProtoMessage() {}

func (x *Vocabulary) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vocabulary.ProtoReflect.Descriptor instead.
func (*Vocabulary) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{4}
}

func (x *Vocabulary) GetMeaningExplanation() string {
	if x != nil && x.MeaningExplanation != nil {
		return *x.MeaningExplanation
	}
	return ""
}

func (x *Vocabulary) GetReadingExplanation() string {
	if x != nil && x.ReadingExplanation != nil {
		return *x.ReadingExplanation
	}
	return ""
}

func (x *Vocabulary) GetSentences() []*Vocabulary_Sentence {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *Vocabulary) GetPartsOfSpeech() []Vocabulary_PartOfSpeech {
	if x != nil {
		return x.PartsOfSpeech
	}
	return nil
}

func (x *Vocabulary) GetAudio() []*Vocabulary_PronunciationAudio {
	if x != nil {
		return x.Audio
	}
	return nil
}

type Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *int64      `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Level                  *int32      `protobuf:"varint,2,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Slug                   *string     `protobuf:"bytes,3,opt,name=slug,proto3,oneof" json:"slug,omitempty"`
	DocumentUrl            *string     `protobuf:"bytes,4,opt,name=document_url,json=documentUrl,proto3,oneof" json:"document_url,omitempty"`
	Japanese               *string     `protobuf:"bytes,5,opt,name=japanese,proto3,oneof" json:"japanese,omitempty"`
	Readings               []*Reading  `protobuf:"bytes,6,rep,name=readings,proto3" json:"readings,omitempty"` // Does not apply to radicals or kana vocabulary.
	Meanings               []*Meaning  `protobuf:"bytes,7,rep,name=meanings,proto3" json:"meanings,omitempty"`
	ComponentSubjectIds    []int64     `protobuf:"varint,8,rep,packed,name=component_subject_ids,json=componentSubjectIds,proto3" json:"component_subject_ids,omitempty"`           // Does not apply to radicals.
	AmalgamationSubjectIds []int64     `protobuf:"varint,12,rep,packed,name=amalgamation_subject_ids,json=amalgamationSubjectIds,proto3" json:"amalgamation_subject_ids,omitempty"` // Does not apply to vocabulary or kana vocabulary.
	Radical                *Radical    `protobuf:"bytes,9,opt,name=radical,proto3,oneof" json:"radical,omitempty"`
	Kanji                  *Kanji      `protobuf:"bytes,10,opt,name=kanji,proto3,oneof" json:"kanji,omitempty"`
	Vocabulary             *Vocabulary `protobuf:"bytes,11,opt,name=vocabulary,proto3,oneof" json:"vocabulary,omitempty"`
}

func (x *Subject) Reset() {
	*x = Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{5}
}

func (x *Subject) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Subject) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Subject) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Subject) GetDocumentUrl() string {
	if x != nil && x.DocumentUrl != nil {
		return *x.DocumentUrl
	}
	return ""
}

func (x *Subject) GetJapanese() string {
	if x != nil && x.Japanese != nil {
		return *x.Japanese
	}
	return ""
}

func (x *Subject) GetReadings() []*Reading {
	if x != nil {
		return x.Readings
	}
	return nil
}

func (x *Subject) GetMeanings() []*Meaning {
	if x != nil {
		return x.Meanings
	}
	return nil
}

func (x *Subject) GetComponentSubjectIds() []int64 {
	if x != nil {
		return x.ComponentSubjectIds
	}
	return nil
}

func (x *Subject) GetAmalgamationSubjectIds() []int64 {
	if x != nil {
		return x.AmalgamationSubjectIds
	}
	return nil
}

func (x *Subject) GetRadical() *Radical {
	if x != nil {
		return x.Radical
	}
	return nil
}

func (x *Subject) GetKanji() *Kanji {
	if x != nil {
		return x.Kanji
	}
	return nil
}

func (x *Subject) GetVocabulary() *Vocabulary {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int64        `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Level          *int32        `protobuf:"varint,2,opt,name=level,proto3,oneof" json:"level,omitempty"`
	SubjectId      *int64        `protobuf:"varint,3,opt,name=subject_id,json=subjectId,proto3,oneof" json:"subject_id,omitempty"`
	SubjectType    *Subject_Type `protobuf:"varint,4,opt,name=subject_type,json=subjectType,proto3,enum=proto.Subject_Type,oneof" json:"subject_type,omitempty"`
	AvailableAt    *int32        `protobuf:"varint,5,opt,name=available_at,json=availableAt,proto3,oneof" json:"available_at,omitempty"`
	StartedAt      *int32        `protobuf:"varint,6,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	SrsStageNumber *int32        `protobuf:"varint,7,opt,name=srs_stage_number,json=srsStageNumber,proto3,oneof" json:"srs_stage_number,omitempty"`
	PassedAt       *int32        `protobuf:"varint,8,opt,name=passed_at,json=passedAt,proto3,oneof" json:"passed_at,omitempty"`
	BurnedAt       *int32        `protobuf:"varint,9,opt,name=burned_at,json=burnedAt,proto3,oneof" json:"burned_at,omitempty"`
	// Kana-only vocab shares the VOCABULARY subject_type, but we still want to be
	// able to filter them out if the user wants to.
	IsKanaOnlyVocab *bool `protobuf:"varint,10,opt,name=is_kana_only_vocab,json=isKanaOnlyVocab,proto3,oneof" json:"is_kana_only_vocab,omitempty"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{6}
}

func (x *Assignment) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Assignment) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Assignment) GetSubjectId() int64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *Assignment) GetSubjectType() Subject_Type {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return Subject_UNKNOWN
}

func (x *Assignment) GetAvailableAt() int32 {
	if x != nil && x.AvailableAt != nil {
		return *x.AvailableAt
	}
	return 0
}

func (x *Assignment) GetStartedAt() int32 {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return 0
}

func (x *Assignment) GetSrsStageNumber() int32 {
	if x != nil && x.SrsStageNumber != nil {
		return *x.SrsStageNumber
	}
	return 0
}

func (x *Assignment) GetPassedAt() int32 {
	if x != nil && x.PassedAt != nil {
		return *x.PassedAt
	}
	return 0
}

func (x *Assignment) GetBurnedAt() int32 {
	if x != nil && x.BurnedAt != nil {
		return *x.BurnedAt
	}
	return 0
}

func (x *Assignment) GetIsKanaOnlyVocab() bool {
	if x != nil && x.IsKanaOnlyVocab != nil {
		return *x.IsKanaOnlyVocab
	}
	return false
}

type Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeaningWrong      *bool       `protobuf:"varint,3,opt,name=meaning_wrong,json=meaningWrong,proto3,oneof" json:"meaning_wrong,omitempty"`
	ReadingWrong      *bool       `protobuf:"varint,4,opt,name=reading_wrong,json=readingWrong,proto3,oneof" json:"reading_wrong,omitempty"`
	IsLesson          *bool       `protobuf:"varint,5,opt,name=is_lesson,json=isLesson,proto3,oneof" json:"is_lesson,omitempty"`
	Assignment        *Assignment `protobuf:"bytes,6,opt,name=assignment,proto3,oneof" json:"assignment,omitempty"`
	CreatedAt         *int32      `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	MeaningWrongCount *int32      `protobuf:"varint,8,opt,name=meaning_wrong_count,json=meaningWrongCount,proto3,oneof" json:"meaning_wrong_count,omitempty"`
	ReadingWrongCount *int32      `protobuf:"varint,9,opt,name=reading_wrong_count,json=readingWrongCount,proto3,oneof" json:"reading_wrong_count,omitempty"`
}

func (x *Progress) Reset() {
	*x = Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progress) ProtoMessage() {}

func (x *Progress) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progress.ProtoReflect.Descriptor instead.
func (*Progress) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{7}
}

func (x *Progress) GetMeaningWrong() bool {
	if x != nil && x.MeaningWrong != nil {
		return *x.MeaningWrong
	}
	return false
}

func (x *Progress) GetReadingWrong() bool {
	if x != nil && x.ReadingWrong != nil {
		return *x.ReadingWrong
	}
	return false
}

func (x *Progress) GetIsLesson() bool {
	if x != nil && x.IsLesson != nil {
		return *x.IsLesson
	}
	return false
}

func (x *Progress) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

func (x *Progress) GetCreatedAt() int32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *Progress) GetMeaningWrongCount() int32 {
	if x != nil && x.MeaningWrongCount != nil {
		return *x.MeaningWrongCount
	}
	return 0
}

func (x *Progress) GetReadingWrongCount() int32 {
	if x != nil && x.ReadingWrongCount != nil {
		return *x.ReadingWrongCount
	}
	return 0
}

type StudyMaterials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *int64   `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	SubjectId       *int64   `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3,oneof" json:"subject_id,omitempty"`
	MeaningNote     *string  `protobuf:"bytes,3,opt,name=meaning_note,json=meaningNote,proto3,oneof" json:"meaning_note,omitempty"`
	ReadingNote     *string  `protobuf:"bytes,4,opt,name=reading_note,json=readingNote,proto3,oneof" json:"reading_note,omitempty"`
	MeaningSynonyms []string `protobuf:"bytes,5,rep,name=meaning_synonyms,json=meaningSynonyms,proto3" json:"meaning_synonyms,omitempty"`
}

func (x *StudyMaterials) Reset() {
	*x = StudyMaterials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudyMaterials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudyMaterials) ProtoMessage() {}

func (x *StudyMaterials) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudyMaterials.ProtoReflect.Descriptor instead.
func (*StudyMaterials) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{8}
}

func (x *StudyMaterials) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StudyMaterials) GetSubjectId() int64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *StudyMaterials) GetMeaningNote() string {
	if x != nil && x.MeaningNote != nil {
		return *x.MeaningNote
	}
	return ""
}

func (x *StudyMaterials) GetReadingNote() string {
	if x != nil && x.ReadingNote != nil {
		return *x.ReadingNote
	}
	return ""
}

func (x *StudyMaterials) GetMeaningSynonyms() []string {
	if x != nil {
		return x.MeaningSynonyms
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username                      *string `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Level                         *int32  `protobuf:"varint,2,opt,name=level,proto3,oneof" json:"level,omitempty"`
	MaxLevelGrantedBySubscription *int32  `protobuf:"varint,3,opt,name=max_level_granted_by_subscription,json=maxLevelGrantedBySubscription,proto3,oneof" json:"max_level_granted_by_subscription,omitempty"`
	ProfileUrl                    *string `protobuf:"bytes,4,opt,name=profile_url,json=profileUrl,proto3,oneof" json:"profile_url,omitempty"`
	StartedAt                     *int32  `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	Subscribed                    *bool   `protobuf:"varint,6,opt,name=subscribed,proto3,oneof" json:"subscribed,omitempty"`
	SubscriptionEndsAt            *int32  `protobuf:"varint,7,opt,name=subscription_ends_at,json=subscriptionEndsAt,proto3,oneof" json:"subscription_ends_at,omitempty"`
	VacationStartedAt             *int32  `protobuf:"varint,8,opt,name=vacation_started_at,json=vacationStartedAt,proto3,oneof" json:"vacation_started_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{9}
}

func (x *User) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *User) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *User) GetMaxLevelGrantedBySubscription() int32 {
	if x != nil && x.MaxLevelGrantedBySubscription != nil {
		return *x.MaxLevelGrantedBySubscription
	}
	return 0
}

func (x *User) GetProfileUrl() string {
	if x != nil && x.ProfileUrl != nil {
		return *x.ProfileUrl
	}
	return ""
}

func (x *User) GetStartedAt() int32 {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return 0
}

func (x *User) GetSubscribed() bool {
	if x != nil && x.Subscribed != nil {
		return *x.Subscribed
	}
	return false
}

func (x *User) GetSubscriptionEndsAt() int32 {
	if x != nil && x.SubscriptionEndsAt != nil {
		return *x.SubscriptionEndsAt
	}
	return 0
}

func (x *User) GetVacationStartedAt() int32 {
	if x != nil && x.VacationStartedAt != nil {
		return *x.VacationStartedAt
	}
	return 0
}

type FormattedText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format  []FormattedText_Format `protobuf:"varint,1,rep,packed,name=format,proto3,enum=proto.FormattedText_Format" json:"format,omitempty"`
	Text    *string                `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
	LinkUrl *string                `protobuf:"bytes,3,opt,name=link_url,json=linkUrl,proto3,oneof" json:"link_url,omitempty"`
}

func (x *FormattedText) Reset() {
	*x = FormattedText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattedText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattedText) ProtoMessage() {}

func (x *FormattedText) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattedText.ProtoReflect.Descriptor instead.
func (*FormattedText) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{10}
}

func (x *FormattedText) GetFormat() []FormattedText_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *FormattedText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FormattedText) GetLinkUrl() string {
	if x != nil && x.LinkUrl != nil {
		return *x.LinkUrl
	}
	return ""
}

type DataFileHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectsByLevel []*SubjectsByLevel `protobuf:"bytes,1,rep,name=subjects_by_level,json=subjectsByLevel,proto3" json:"subjects_by_level,omitempty"`
	// The level of each subject.
	LevelBySubject []int32 `protobuf:"varint,4,rep,packed,name=level_by_subject,json=levelBySubject,proto3" json:"level_by_subject,omitempty"`
	// Subject IDs that no longer have any data.  The client should ignore any
	// assignments with these subjects.
	DeletedSubjectIds []int32 `protobuf:"varint,3,rep,packed,name=deleted_subject_ids,json=deletedSubjectIds,proto3" json:"deleted_subject_ids,omitempty"`
	// Offset of each encoded Subject message, starting from the end of this
	// header in the file.
	SubjectByteOffset []uint32 `protobuf:"varint,2,rep,packed,name=subject_byte_offset,json=subjectByteOffset,proto3" json:"subject_byte_offset,omitempty"`
}

func (x *DataFileHeader) Reset() {
	*x = DataFileHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFileHeader) ProtoMessage() {}

func (x *DataFileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFileHeader.ProtoReflect.Descriptor instead.
func (*DataFileHeader) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{11}
}

func (x *DataFileHeader) GetSubjectsByLevel() []*SubjectsByLevel {
	if x != nil {
		return x.SubjectsByLevel
	}
	return nil
}

func (x *DataFileHeader) GetLevelBySubject() []int32 {
	if x != nil {
		return x.LevelBySubject
	}
	return nil
}

func (x *DataFileHeader) GetDeletedSubjectIds() []int32 {
	if x != nil {
		return x.DeletedSubjectIds
	}
	return nil
}

func (x *DataFileHeader) GetSubjectByteOffset() []uint32 {
	if x != nil {
		return x.SubjectByteOffset
	}
	return nil
}

type SubjectsByLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radicals   []int64 `protobuf:"varint,1,rep,packed,name=radicals,proto3" json:"radicals,omitempty"`
	Kanji      []int64 `protobuf:"varint,2,rep,packed,name=kanji,proto3" json:"kanji,omitempty"`
	Vocabulary []int64 `protobuf:"varint,3,rep,packed,name=vocabulary,proto3" json:"vocabulary,omitempty"`
}

func (x *SubjectsByLevel) Reset() {
	*x = SubjectsByLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectsByLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectsByLevel) ProtoMessage() {}

func (x *SubjectsByLevel) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectsByLevel.ProtoReflect.Descriptor instead.
func (*SubjectsByLevel) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{12}
}

func (x *SubjectsByLevel) GetRadicals() []int64 {
	if x != nil {
		return x.Radicals
	}
	return nil
}

func (x *SubjectsByLevel) GetKanji() []int64 {
	if x != nil {
		return x.Kanji
	}
	return nil
}

func (x *SubjectsByLevel) GetVocabulary() []int64 {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

type Level struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Level       *int32 `protobuf:"varint,2,opt,name=level,proto3,oneof" json:"level,omitempty"`
	AbandonedAt *int32 `protobuf:"varint,3,opt,name=abandoned_at,json=abandonedAt,proto3,oneof" json:"abandoned_at,omitempty"`
	CompletedAt *int32 `protobuf:"varint,4,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	CreatedAt   *int32 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	PassedAt    *int32 `protobuf:"varint,6,opt,name=passed_at,json=passedAt,proto3,oneof" json:"passed_at,omitempty"`
	StartedAt   *int32 `protobuf:"varint,7,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	UnlockedAt  *int32 `protobuf:"varint,8,opt,name=unlocked_at,json=unlockedAt,proto3,oneof" json:"unlocked_at,omitempty"`
}

func (x *Level) Reset() {
	*x = Level{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Level) ProtoMessage() {}

func (x *Level) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Level.ProtoReflect.Descriptor instead.
func (*Level) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{13}
}

func (x *Level) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Level) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Level) GetAbandonedAt() int32 {
	if x != nil && x.AbandonedAt != nil {
		return *x.AbandonedAt
	}
	return 0
}

func (x *Level) GetCompletedAt() int32 {
	if x != nil && x.CompletedAt != nil {
		return *x.CompletedAt
	}
	return 0
}

func (x *Level) GetCreatedAt() int32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *Level) GetPassedAt() int32 {
	if x != nil && x.PassedAt != nil {
		return *x.PassedAt
	}
	return 0
}

func (x *Level) GetStartedAt() int32 {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return 0
}

func (x *Level) GetUnlockedAt() int32 {
	if x != nil && x.UnlockedAt != nil {
		return *x.UnlockedAt
	}
	return 0
}

type DeprecatedMnemonicFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []*DeprecatedMnemonicFile_Subject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *DeprecatedMnemonicFile) Reset() {
	*x = DeprecatedMnemonicFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedMnemonicFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedMnemonicFile) ProtoMessage() {}

func (x *DeprecatedMnemonicFile) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedMnemonicFile.ProtoReflect.Descriptor instead.
func (*DeprecatedMnemonicFile) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{14}
}

func (x *DeprecatedMnemonicFile) GetSubjects() []*DeprecatedMnemonicFile_Subject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type VoiceActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int64             `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Gender      *VoiceActor_Gender `protobuf:"varint,2,opt,name=gender,proto3,enum=proto.VoiceActor_Gender,oneof" json:"gender,omitempty"`
	Name        *string            `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string            `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *VoiceActor) Reset() {
	*x = VoiceActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceActor) ProtoMessage() {}

func (x *VoiceActor) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceActor.ProtoReflect.Descriptor instead.
func (*VoiceActor) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{15}
}

func (x *VoiceActor) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *VoiceActor) GetGender() VoiceActor_Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return VoiceActor_UNKNOWN
}

func (x *VoiceActor) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VoiceActor) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Vocabulary_Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Japanese *string `protobuf:"bytes,1,opt,name=japanese,proto3,oneof" json:"japanese,omitempty"`
	English  *string `protobuf:"bytes,2,opt,name=english,proto3,oneof" json:"english,omitempty"`
}

func (x *Vocabulary_Sentence) Reset() {
	*x = Vocabulary_Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vocabulary_Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vocabulary_Sentence) ProtoMessage() {}

func (x *Vocabulary_Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vocabulary_Sentence.ProtoReflect.Descriptor instead.
func (*Vocabulary_Sentence) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Vocabulary_Sentence) GetJapanese() string {
	if x != nil && x.Japanese != nil {
		return *x.Japanese
	}
	return ""
}

func (x *Vocabulary_Sentence) GetEnglish() string {
	if x != nil && x.English != nil {
		return *x.English
	}
	return ""
}

type Vocabulary_PronunciationAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          *string `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
	VoiceActorId *int64  `protobuf:"varint,2,opt,name=voice_actor_id,json=voiceActorId,proto3,oneof" json:"voice_actor_id,omitempty"`
}

func (x *Vocabulary_PronunciationAudio) Reset() {
	*x = Vocabulary_PronunciationAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vocabulary_PronunciationAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vocabulary_PronunciationAudio) ProtoMessage() {}

func (x *Vocabulary_PronunciationAudio) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vocabulary_PronunciationAudio.ProtoReflect.Descriptor instead.
func (*Vocabulary_PronunciationAudio) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Vocabulary_PronunciationAudio) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Vocabulary_PronunciationAudio) GetVoiceActorId() int64 {
	if x != nil && x.VoiceActorId != nil {
		return *x.VoiceActorId
	}
	return 0
}

type DeprecatedMnemonicFile_Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          *int32           `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	FormattedDeprecatedMnemonic []*FormattedText `protobuf:"bytes,2,rep,name=formatted_deprecated_mnemonic,json=formattedDeprecatedMnemonic,proto3" json:"formatted_deprecated_mnemonic,omitempty"`
}

func (x *DeprecatedMnemonicFile_Subject) Reset() {
	*x = DeprecatedMnemonicFile_Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wanikani_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedMnemonicFile_Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedMnemonicFile_Subject) ProtoMessage() {}

func (x *DeprecatedMnemonicFile_Subject) ProtoReflect() protoreflect.Message {
	mi := &file_wanikani_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedMnemonicFile_Subject.ProtoReflect.Descriptor instead.
func (*DeprecatedMnemonicFile_Subject) Descriptor() ([]byte, []int) {
	return file_wanikani_api_proto_rawDescGZIP(), []int{14, 0}
}

func (x *DeprecatedMnemonicFile_Subject) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeprecatedMnemonicFile_Subject) GetFormattedDeprecatedMnemonic() []*FormattedText {
	if x != nil {
		return x.FormattedDeprecatedMnemonic
	}
	return nil
}

var File_wanikani_api_proto protoreflect.FileDescriptor

var file_wanikani_api_proto_rawDesc = []byte{
	0x0a, 0x12, 0x77, 0x61, 0x6e, 0x69, 0x6b, 0x61, 0x6e, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x22, 0x57, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x58, 0x49, 0x4c, 0x49, 0x41,
	0x52, 0x59, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xd8, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e,
	0x59, 0x4f, 0x4d, 0x49, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x55, 0x4e, 0x59, 0x4f, 0x4d,
	0x49, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x4e, 0x4f, 0x52, 0x49, 0x10, 0x03, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x07, 0x52, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x13, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x15, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x22, 0xf7, 0x02, 0x0a, 0x05, 0x4b, 0x61, 0x6e, 0x6a, 0x69, 0x12, 0x2e,
	0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x16, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x5f, 0x6b, 0x61, 0x6e, 0x6a, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x14, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	0x72, 0x4b, 0x61, 0x6e, 0x6a, 0x69, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65,
	0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x6b, 0x61, 0x6e, 0x6a, 0x69,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0xa8,
	0x07, 0x0a, 0x0a, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x13, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65,
	0x61, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x63, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x1a, 0x71, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0xd5, 0x02, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x43, 0x48, 0x49, 0x44, 0x41, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x42,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x4a, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x44, 0x41, 0x4e, 0x5f, 0x56, 0x45,
	0x52, 0x42, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x5f, 0x41, 0x44, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x5f, 0x41, 0x44, 0x4a, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x58, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x56, 0x45, 0x52, 0x42, 0x10, 0x0b, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x52, 0x55, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x10, 0x0c, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x44, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f,
	0x4e, 0x4f, 0x55, 0x4e, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x4a, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x8b, 0x05, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6a, 0x61, 0x70, 0x61,
	0x6e, 0x65, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x61, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6d, 0x61, 0x6c, 0x67, 0x61, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x61, 0x6d, 0x61, 0x6c, 0x67, 0x61, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x07, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x05,
	0x52, 0x07, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x05,
	0x6b, 0x61, 0x6e, 0x6a, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x61, 0x6e, 0x6a, 0x69, 0x48, 0x06, 0x52, 0x05, 0x6b, 0x61, 0x6e,
	0x6a, 0x69, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x48, 0x07, 0x52, 0x0a,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x22, 0x3b, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x4b, 0x41, 0x4e, 0x4a, 0x49, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f,
	0x43, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x59, 0x10, 0x03, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6c, 0x75, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65,
	0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6b, 0x61, 0x6e, 0x6a, 0x69, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x22, 0xa7, 0x04, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x0e, 0x73, 0x72, 0x73, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x62, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6b, 0x61, 0x6e,
	0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x4b, 0x61, 0x6e, 0x61, 0x4f, 0x6e, 0x6c, 0x79,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x72,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69,
	0x73, 0x5f, 0x6b, 0x61, 0x6e, 0x61, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x22, 0xd2, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x0d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x57, 0x72, 0x6f, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x11, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x6f,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65,
	0x61, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x88, 0x04, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x21, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x1d, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x12,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x73,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x11, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x41, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4b,
	0x41, 0x4e, 0x4a, 0x49, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x45,
	0x53, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f, 0x43, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x59, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x54, 0x41, 0x4c, 0x49, 0x43, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x4c, 0x44, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x45, 0x10,
	0x09, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x55, 0x52, 0x55, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x0c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xde,
	0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x62,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x63, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x61, 0x6e, 0x6a, 0x69, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6b,
	0x61, 0x6e, 0x6a, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x22, 0x86, 0x03, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52,
	0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xdc, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x7f, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x1d, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x52, 0x1b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xf0, 0x01, 0x0a,
	0x0a, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x2b, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x02, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x35, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61,
	0x76, 0x69, 0x64, 0x73, 0x61, 0x6e, 0x73, 0x6f, 0x6d, 0x65, 0x2f, 0x74, 0x73, 0x75, 0x72, 0x75,
	0x6b, 0x61, 0x6d, 0x65, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x54, 0x4b, 0x4d,
	0xba, 0x02, 0x03, 0x54, 0x4b, 0x4d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wanikani_api_proto_rawDescOnce sync.Once
	file_wanikani_api_proto_rawDescData = file_wanikani_api_proto_rawDesc
)

func file_wanikani_api_proto_rawDescGZIP() []byte {
	file_wanikani_api_proto_rawDescOnce.Do(func() {
		file_wanikani_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_wanikani_api_proto_rawDescData)
	})
	return file_wanikani_api_proto_rawDescData
}

var file_wanikani_api_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_wanikani_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_wanikani_api_proto_goTypes = []interface{}{
	(Meaning_Type)(0),                      // 0: proto.Meaning.Type
	(Reading_Type)(0),                      // 1: proto.Reading.Type
	(Vocabulary_PartOfSpeech)(0),           // 2: proto.Vocabulary.PartOfSpeech
	(Subject_Type)(0),                      // 3: proto.Subject.Type
	(FormattedText_Format)(0),              // 4: proto.FormattedText.Format
	(VoiceActor_Gender)(0),                 // 5: proto.VoiceActor.Gender
	(*Meaning)(nil),                        // 6: proto.Meaning
	(*Reading)(nil),                        // 7: proto.Reading
	(*Radical)(nil),                        // 8: proto.Radical
	(*Kanji)(nil),                          // 9: proto.Kanji
	(*Vocabulary)(nil),                     // 10: proto.Vocabulary
	(*Subject)(nil),                        // 11: proto.Subject
	(*Assignment)(nil),                     // 12: proto.Assignment
	(*Progress)(nil),                       // 13: proto.Progress
	(*StudyMaterials)(nil),                 // 14: proto.StudyMaterials
	(*User)(nil),                           // 15: proto.User
	(*FormattedText)(nil),                  // 16: proto.FormattedText
	(*DataFileHeader)(nil),                 // 17: proto.DataFileHeader
	(*SubjectsByLevel)(nil),                // 18: proto.SubjectsByLevel
	(*Level)(nil),                          // 19: proto.Level
	(*DeprecatedMnemonicFile)(nil),         // 20: proto.DeprecatedMnemonicFile
	(*VoiceActor)(nil),                     // 21: proto.VoiceActor
	(*Vocabulary_Sentence)(nil),            // 22: proto.Vocabulary.Sentence
	(*Vocabulary_PronunciationAudio)(nil),  // 23: proto.Vocabulary.PronunciationAudio
	(*DeprecatedMnemonicFile_Subject)(nil), // 24: proto.DeprecatedMnemonicFile.Subject
}
var file_wanikani_api_proto_depIdxs = []int32{
	0,  // 0: proto.Meaning.type:type_name -> proto.Meaning.Type
	1,  // 1: proto.Reading.type:type_name -> proto.Reading.Type
	22, // 2: proto.Vocabulary.sentences:type_name -> proto.Vocabulary.Sentence
	2,  // 3: proto.Vocabulary.parts_of_speech:type_name -> proto.Vocabulary.PartOfSpeech
	23, // 4: proto.Vocabulary.audio:type_name -> proto.Vocabulary.PronunciationAudio
	7,  // 5: proto.Subject.readings:type_name -> proto.Reading
	6,  // 6: proto.Subject.meanings:type_name -> proto.Meaning
	8,  // 7: proto.Subject.radical:type_name -> proto.Radical
	9,  // 8: proto.Subject.kanji:type_name -> proto.Kanji
	10, // 9: proto.Subject.vocabulary:type_name -> proto.Vocabulary
	3,  // 10: proto.Assignment.subject_type:type_name -> proto.Subject.Type
	12, // 11: proto.Progress.assignment:type_name -> proto.Assignment
	4,  // 12: proto.FormattedText.format:type_name -> proto.FormattedText.Format
	18, // 13: proto.DataFileHeader.subjects_by_level:type_name -> proto.SubjectsByLevel
	24, // 14: proto.DeprecatedMnemonicFile.subjects:type_name -> proto.DeprecatedMnemonicFile.Subject
	5,  // 15: proto.VoiceActor.gender:type_name -> proto.VoiceActor.Gender
	16, // 16: proto.DeprecatedMnemonicFile.Subject.formatted_deprecated_mnemonic:type_name -> proto.FormattedText
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_wanikani_api_proto_init() }
func file_wanikani_api_proto_init() {
	if File_wanikani_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wanikani_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meaning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Radical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kanji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vocabulary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudyMaterials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattedText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFileHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectsByLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Level); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedMnemonicFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vocabulary_Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vocabulary_PronunciationAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wanikani_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedMnemonicFile_Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wanikani_api_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_wanikani_api_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wanikani_api_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wanikani_api_proto_goTypes,
		DependencyIndexes: file_wanikani_api_proto_depIdxs,
		EnumInfos:         file_wanikani_api_proto_enumTypes,
		MessageInfos:      file_wanikani_api_proto_msgTypes,
	}.Build()
	File_wanikani_api_proto = out.File
	file_wanikani_api_proto_rawDesc = nil
	file_wanikani_api_proto_goTypes = nil
	file_wanikani_api_proto_depIdxs = nil
}
